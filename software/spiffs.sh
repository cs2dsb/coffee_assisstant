#!/usr/bin/env bash

# Exit when any command fails
set -o errexit

# Exit when an undeclared variable is used
set -o nounset

# Exit when a piped command returns a non-zero exit code
set -o pipefail

PROJECT="${1:-skeleton}"
TEST_HOST="${OTA_HOST:-esp32.local}"
OTA_HOST="${OTA_HOST:-}"
FLASH="${FLASH:-true}"
FORCE="${FORCE:-false}"

if [ "$FLASH" == "true" ] && [ "$OTA_HOST" != "" ]; then
    echo "Both FLASH=true and OTA_HOST provided, only one supported at a time" >&2
    exit 1
fi

source ./env.sh 2>/dev/null

function add_route() {
    # 1 = path to routes.h
    # 2 = route (not including initial /)
    # 3 = #define name
    # 4 = mime type
    # 5 = encoding
    # 6 = fs path
    # 7 = path to test_routes.sh
    cat >> "$1" <<- EOF
    register_fs_handler(server, "/$2", HTTP_GET, "$4", "$5", "$6");
EOF

    TR="${7:-}"
    if [ "$TR" != "" ] && test -f "$TR"; then
        cat >> "$TR" <<- EOF

out=\`curl -sSL -m 5 -o /dev/null -D - http://$TEST_HOST/$2 2>&1\`
if [ "\$?" == "0" ]; then
    tt=0
    for i in {1..10}; do
        t=\`curl -s -m 5 -o /dev/null -w "%{time_total}\n" http://$TEST_HOST/$2\`
        tt=\`echo "\$tt + \$t" | bc\`
    done
    tt=\`echo "\$tt/10.0*1000." | bc -l | sed 's:0*$::'\`
    echo "OK  ($2). Avg latency: \$tt ms"
else
    echo "ERR ($2):"
    echo "\$out"
fi
EOF
    fi
}

STATIC="${PROJECT}/static"
SPIFFS_BIN="$PROJECT/build/${PROJECT}.spiffs.bin"
SPIFFS_DIR="$PROJECT/build/spiffs"
SPIFFS_DIR_OLD="$SPIFFS_DIR.old"

SPIFFS_DIFF=true
if test -d "$SPIFFS_DIR"; then
    rm -rf "$SPIFFS_DIR_OLD"
    mv "$SPIFFS_DIR" "$SPIFFS_DIR_OLD"
fi

if test -d "$STATIC"; then
    BROTLI=./third_party/brotli/brotli
    ZOPFLI=./third_party/zopfli/zopfli
    ROUTES="$STATIC/routes.h"
    TEST_ROUTES="${PROJECT}/test_routes.sh"

    mkdir -p "$SPIFFS_DIR"

    echo "void register_routes(AsyncWebServer *server) {" > "$ROUTES"
    if test -f "$STATIC/index.html"; then
        add_route "$ROUTES" "" "INDEX_HTML" "text/html" "gzip" "/index.html.gz" "$TEST_ROUTES"
    fi
    cat > "$STATIC/inc_tmp.h" <<- EOF
// Autogenerated list of file static includes and their routes
#include "../handlers.h"
extern void serial_printf(const char *fmt, ...);
EOF
    cat > "$TEST_ROUTES" <<- EOF
#!/usr/bin/env bash
# Test script for auto generated routes

# Exit when an undeclared variable is used
set -o nounset
EOF
    chmod +x "$TEST_ROUTES"

    find "$STATIC" -type f \( \
           -name \*.js   \
        -o -name \*.html \
        -o -name \*.css  \
        -o -name \*.ico  \
        -o -name \*.png  \
        -o -name \*.gif  \
        -o -name \*.jpg  \
        \) -print0 |
    while IFS= read -r -d '' path || [[ $path ]]; do
        echo "SPIFFS file: $path"
        dir="${path%*/*}"
        file="${path##*/}"
        mime="`file --mime-type "$path" --brief`"
        def=`echo "${file^^}" | tr '. ' _`
        route="`echo "$path" | sed "s|^${PROJECT}/static/||"`"
        spiffs_dir="$SPIFFS_DIR/`echo "${path%*/*}" | sed "s|^${PROJECT}/static||" | sed "s|^/||"`"

        #$BROTLI --force --keep --best "$path"
        #gzip --force --keep --best "$path"
        $ZOPFLI --force --keep --best "$path"

        mkdir -p "$spiffs_dir"

        #cp "$path.br" "$spiffs_dir"
        cp "$path.gz" "$spiffs_dir"

        #add_route "$ROUTES" "$route" "$def" "$mime" "br" "/$route.br"
        add_route "$ROUTES" "$route" "$def" "$mime" "gzip" "/$route.gz" "$TEST_ROUTES"
    done
    echo -e "}" >> "$ROUTES"

    cat "$ROUTES" >> "$STATIC/inc_tmp.h"
    rm -f "$ROUTES"
    mv "$STATIC/inc_tmp.h" "$ROUTES"
fi
if test -d "$SPIFFS_DIR_OLD"; then
    set +o errexit
    diff -r "$SPIFFS_DIR_OLD" "$SPIFFS_DIR" #&>/dev/null
    if [ "$?" == "0" ]; then
        SPIFFS_DIFF=false
        echo -e "$(tput setaf 0)$(tput setab 3)\n\n  SPIFFS Unchanged. Skipping\n$(tput sgr0)"
    fi
    set -o errexit
fi


echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Packing SPIFFS\n$(tput sgr0)"
SPIFFS_SIZE=`cat "${PROJECT}/build/partitions.csv" | grep spiffs | cut -d',' -f5`
SPIFFS_OFFSET=`cat "${PROJECT}/build/partitions.csv" | grep spiffs | cut -d',' -f4`
#MKSPIFFS="`find .arduino15 -name mkspiffs -type f | head -n 1`"
MKSPIFFS=./third_party/mklittlefs/mklittlefs
ESPTOOL="`find .arduino15 -name esptool.py -type f | head -n 1`"

"$MKSPIFFS" -c "$SPIFFS_DIR" -b 4096 -p 256 "$SPIFFS_BIN"

if [ "$SPIFFS_DIFF" == "true" ] || [ "$FORCE" == "true" ]; then
    SERIAL_PORT=""
    if [ "$FLASH" == "true" ]; then
        set +o errexit
        SERIAL_PORT=`./find_port.sh`
        set -o errexit
    fi

    if [ "$FLASH" == "true" ] && [ "$SERIAL_PORT" != "" ]; then
        echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Flashing SPIFFS\n$(tput sgr0)"

        "$ESPTOOL" \
            --chip esp32 \
            --port "$SERIAL_PORT" \
            --baud 921600 \
            write_flash \
            -z $SPIFFS_OFFSET \
            "$SPIFFS_BIN"

        if [ "$?" == "0" ]; then
            echo -e "$(tput setaf 0)$(tput setab 2)\n\n  SPIFFS succeeded \n$(tput sgr0)"
        else
            echo -e "$(tput setaf 0)$(tput setab 1)\n\n  SPIFFS failed \n$(tput sgr0)"
        fi
    elif [ "$OTA_HOST" != "" ]; then
        echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Uploading SPIFFS OTA \n$(tput sgr0)"

        BIN_FILE="$SPIFFS_BIN"
        MD5=`md5sum "$BIN_FILE" | cut -d' ' -f1`
        curl \
            --progress-bar \
            -o /dev/null \
            -F MD5="$MD5" \
            -F firmware="@$BIN_FILE; filename=filesystem" \
            http://$OTA_HOST/update

        if [ "$?" == "0" ]; then
            echo -e "$(tput setaf 0)$(tput setab 2)\n\n  OTA succeeded \n$(tput sgr0)"
        else
            echo -e "$(tput setaf 0)$(tput setab 1)\n\n  OTA failed \n$(tput sgr0)"
        fi
    fi
fi
