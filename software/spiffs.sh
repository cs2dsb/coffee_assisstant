#!/usr/bin/env bash

# Exit when any command fails
set -o errexit

# Exit when an undeclared variable is used
set -o nounset

# Exit when a piped command returns a non-zero exit code
set -o pipefail

PROJECT="${1:-skeleton}"
TEST_HOST="${OTA_HOST:-esp32.local}"
OTA_HOST="${OTA_HOST:-}"
FLASH="${FLASH:-true}"
FORCE="${FORCE:-false}"

if [ "$FLASH" == "true" ] && [ "$OTA_HOST" != "" ]; then
    echo "Both FLASH=true and OTA_HOST provided, only one supported at a time" >&2
    exit 1
fi

source ./env.sh 2>/dev/null

ROUTES=()

function add_route() {
    routes_h="$1"
    route="$2"
    mime="$3"
    encoding="$4"
    fs_path="$5"
    test_routes_sh="$6"
    content_disposition="$7"

    for r in "${ROUTES[@]}"; do
        if [ "$r" == "$route" ]; then
            echo -e "$(tput setaf 0)$(tput setab 5)Duplicate route \"$route\"$(tput sgr0)"
        fi
    done
    start=${#ROUTES[@]}
    i=$(( start + 1 ))
    ROUTES[$i]="$route"


    cat >> "$routes_h" <<- EOF
    register_fs_handler(server, "/$route", HTTP_GET, "$mime", "$encoding", "inline;filename=\"$content_disposition\"", "$fs_path");
EOF

    if test -f "$test_routes_sh"; then
        cat >> "$test_routes_sh" <<- EOF

out=\`curl -sSL -m 5 -o /dev/null -D - http://$TEST_HOST/$route 2>&1\`
if [ "\$?" == "0" ]; then
    tt=0
    for i in {1..10}; do
        t=\`curl -s -m 5 -o /dev/null -w "%{time_total}\n" http://$TEST_HOST/$route\`
        tt=\`echo "\$tt + \$t" | bc\`
    done
    tt=\`echo "\$tt/10.0*1000." | bc -l | sed 's:0*$::'\`
    echo "OK  ($route). Avg latency: \$tt ms"
else
    echo "ERR ($route):"
    echo "\$out"
fi
EOF
    fi
}

STATIC="${PROJECT}/static"
WEB="${PROJECT}/web"
SPIFFS_BIN="$PROJECT/build/${PROJECT}.spiffs.bin"
SPIFFS_DIR="$PROJECT/build/spiffs"
SPIFFS_DIR_OLD="$SPIFFS_DIR.old"

SPIFFS_DIFF=true
if test -d "$SPIFFS_DIR"; then
    rm -rf "$SPIFFS_DIR_OLD"
    mv "$SPIFFS_DIR" "$SPIFFS_DIR_OLD"
fi

./web.sh "$PROJECT"

if test -d "$STATIC"; then
    #BROTLI=./third_party/brotli/brotli
    ZOPFLI=./third_party/zopfli/zopfli
    ROUTES="$STATIC/routes.h"
    TEST_ROUTES="${PROJECT}/test_routes.sh"

    mkdir -p "$SPIFFS_DIR"

    echo "void register_routes(AsyncWebServer *server) {" > "$ROUTES"
    if test -f "$STATIC/index.html"; then
        add_route "$ROUTES" "" "text/html" "gzip" "/index.html.gz" "$TEST_ROUTES" "/index.html"
    fi
    cat > "$STATIC/inc_tmp.h" <<- EOF
// Autogenerated list of file static includes and their routes
#include "../handlers.h"
extern void serial_printf(const char *fmt, ...);
EOF
    cat > "$TEST_ROUTES" <<- EOF
#!/usr/bin/env bash
# Test script for auto generated routes

# Exit when an undeclared variable is used
set -o nounset
EOF
    chmod +x "$TEST_ROUTES"


    CONCAT=()
    MAX_PATH_LEN=1
    MAX_ROUTE_LEN=1

    # These are processed in the order defined here so later files will
    # overwrite previous files if they share the same relative path from
    # the root directories given here
    for path in \
        "$STATIC" \
        "$WEB/dist"
    do
        if ! test -d "$path"; then
            continue;
        fi

        readarray -d '' FILES < <(cd "$path"; find -L . -type f \( \
               -name \*.js   \
            -o -name \*.html \
            -o -name \*.css  \
            -o -name \*.ico  \
            -o -name \*.png  \
            -o -name \*.gif  \
            -o -name \*.jpg  \
            -o -name \*.js.map \
            \) -print0)

        for i in "${!FILES[@]}"; do
            cleaned=`echo "${FILES[$i]}" | sed 's|^./||'`

            len=$(( ${#path} + ${#cleaned} + 2 ))
            if (( $len > $MAX_PATH_LEN )); then
                MAX_PATH_LEN=$len
            fi

            len=$(( ${#cleaned} + 1 ))
            if (( $len > $MAX_ROUTE_LEN )); then
                MAX_ROUTE_LEN=$len
            fi

            start=${#CONCAT[@]}
            j=$(( start + 1 ))
            CONCAT[$j]="$path:$cleaned"
        done
    done

    fmt_string="  %${MAX_PATH_LEN}s %${MAX_ROUTE_LEN}s %10s %10s\n"
    printf "$fmt_string" "file" "route" "raw (kB)" "gz (kB)"
    lines="$(printf "$fmt_string" \
        "`head -c $MAX_PATH_LEN </dev/zero | tr '\0' '-' `" \
        "`head -c $MAX_ROUTE_LEN </dev/zero | tr '\0' '-' `" \
        "`head -c 10 </dev/zero | tr '\0' '-' `" \
        "`head -c 10 </dev/zero | tr '\0' '-' `")"
    echo "$lines"

    TOTAL_RAW=0
    TOTAL_GZ=0

    for file in "${CONCAT[@]}"; do
        root="`echo "$file" | cut -d':' -f1`"
        route="`echo "$file" | cut -d':' -f2`"
        path="$root/$route"
        mime="`file --mime-type "$path" --brief`"
        filename="${route##*/}"
        # sed-fu feeling weak
        fake_root="fake_root/$route"
        dir="`echo ${fake_root%*/*} | sed "s|^fake_root\/*||"`"
        spiffs_dir="$SPIFFS_DIR/$dir"
        target_file="$spiffs_dir/$filename.gz"

        #echo $filename $root       $route      $path      $mime    $spiffs_dir

        mkdir -p "$spiffs_dir"
        $ZOPFLI --best -c "$path" > "$target_file"

        o_size=`printf "%0.1f" $(stat -c %s "$path" | xargs -I{} echo "{}/1024" | bc -l)`
        gz_size=`printf "%0.1f" $(stat -c %s "$target_file" | xargs -I{} echo "{}/1024" | bc -l)`

        TOTAL_RAW=`printf "%0.1f" $(echo "$TOTAL_RAW + $o_size" | bc -l)`
        TOTAL_GZ=`printf "%0.1f" $(echo "$TOTAL_GZ + $gz_size" | bc -l)`

        printf "$fmt_string" "$path" "$route" "$o_size" "$gz_size"

        add_route "$ROUTES" "$route" "$mime" "gzip" "/$route.gz" "$TEST_ROUTES" "/$route"
    done
    echo -e "}" >> "$ROUTES"
    echo "$lines"
    printf "$fmt_string" "" "TOTAL" "$TOTAL_RAW" "$TOTAL_GZ"

    cat "$ROUTES" >> "$STATIC/inc_tmp.h"
    rm -f "$ROUTES"
    mv "$STATIC/inc_tmp.h" "$ROUTES"
fi
if test -d "$SPIFFS_DIR_OLD"; then
    set +o errexit
    diff -r "$SPIFFS_DIR_OLD" "$SPIFFS_DIR" #&>/dev/null
    if [ "$?" == "0" ]; then
        SPIFFS_DIFF=false
        echo -e "$(tput setaf 0)$(tput setab 3)\n\n  SPIFFS Unchanged. Skipping\n$(tput sgr0)"
    fi
    set -o errexit
fi

if test -d "$SPIFFS_DIR"; then
    echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Packing SPIFFS\n$(tput sgr0)"

    PARTITIONS="${PROJECT}/build/partitions.csv"
    # There's a chicken and egg problem with build vs. spiffs so just default to
    # a reasonable size if the partitions file isn't in the build folder
    if test -s "$PARTITIONS"; then
        SPIFFS_SIZE=${SPIFFS_SIZE:-`cat "$PARTITIONS" | grep spiffs | cut -d',' -f5`}
        SPIFFS_OFFSET=${SPIFFS_OFFSET:-`cat "$PARTITIONS" | grep spiffs | cut -d',' -f4`}
    else
        SPIFFS_SIZE=${SPIFFS_SIZE:-0x170000}
        SPIFFS_OFFSET=${SPIFFS_OFFSET:-0x290000}
    fi
    #MKSPIFFS="`find .arduino15 -name mkspiffs -type f | head -n 1`"
    MKSPIFFS=./third_party/mklittlefs/mklittlefs
    ESPTOOL="`find .arduino15 -name esptool.py -type f | head -n 1`"

    "$MKSPIFFS" -c "$SPIFFS_DIR" -b 4096 -p 256 -s $SPIFFS_SIZE "$SPIFFS_BIN"

    if [ "$SPIFFS_DIFF" == "true" ] || [ "$FORCE" == "true" ]; then
        SERIAL_PORT=""
        if [ "$FLASH" == "true" ]; then
            set +o errexit
            SERIAL_PORT=`./find_port.sh`
            set -o errexit
        fi

        if [ "$FLASH" == "true" ] && [ "$SERIAL_PORT" != "" ]; then
            echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Flashing SPIFFS\n$(tput sgr0)"

            "$ESPTOOL" \
                --chip esp32 \
                --port "$SERIAL_PORT" \
                --baud 921600 \
                write_flash \
                -z $SPIFFS_OFFSET \
                "$SPIFFS_BIN"

            if [ "$?" == "0" ]; then
                echo -e "$(tput setaf 0)$(tput setab 2)\n\n  SPIFFS succeeded \n$(tput sgr0)"
            else
                echo -e "$(tput setaf 0)$(tput setab 1)\n\n  SPIFFS failed \n$(tput sgr0)"
            fi
        elif [ "$OTA_HOST" != "" ]; then
            echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Uploading SPIFFS OTA \n$(tput sgr0)"

            BIN_FILE="$SPIFFS_BIN"
            MD5=`md5sum "$BIN_FILE" | cut -d' ' -f1`
            curl \
                --progress-bar \
                -o /dev/null \
                -F MD5="$MD5" \
                -F firmware="@$BIN_FILE; filename=filesystem" \
                http://$OTA_HOST/update

            if [ "$?" == "0" ]; then
                echo -e "$(tput setaf 0)$(tput setab 2)\n\n  OTA succeeded \n$(tput sgr0)"
            else
                echo -e "$(tput setaf 0)$(tput setab 1)\n\n  OTA failed \n$(tput sgr0)"
            fi
        fi
    fi
fi
