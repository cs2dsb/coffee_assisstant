#!/usr/bin/env bash

# Exit when any command fails
set -o errexit

# Exit when an undeclared variable is used
set -o nounset

# Exit when a piped command returns a non-zero exit code
set -o pipefail

PROJECT="${1:-skeleton}"
FLASH="${FLASH:-false}"
OTA_HOST="${OTA_HOST:-}"
SPIFFS="${SPIFFS:-true}"

if [ "$FLASH" == "true" ] && [ "$OTA_HOST" != "" ]; then
    echo "Both FLASH=true and OTA_HOST provided, only one supported at a time" >&2
    exit 1
fi

source ./env.sh 2>/dev/null

if [ "$FQBN" == "" ]; then
    echo "FQBN not defined in .env*" >&2
    exit 1
fi

if [ "$FLASH" == "true" ]; then
    SERIAL_PORT=`./find_port.sh`
    if [ "$SERIAL_PORT" == "" ]; then
        echo "Failed to find a serial port" >&2
        exit 1
    fi
fi

cat > credentials.h <<- EOF
#define PROJECT         "${PROJECT}"
#define VERSION         "${VERSION:-0.0.1}"
#define BUILD_TIMESTAMP "`date +"%Y-%m-%d %H:%M:%S"`"
#define MDNS_HOST       "${WIFI_HOST:-esp32}"
#define WIFI_SSID       "${WIFI_SSID:-}"
#define WIFI_PASSWORD   "${WIFI_PASSWORD:-}"
EOF

A_CLI=third_party/arduino-cli/arduino-cli
A_CLI="`realpath $A_CLI`"
A_CFG="--config-file `realpath arduino-cli.yml`"
A_BUILD="`realpath $PROJECT/build`"


function add_route() {
    # 1 = path to routes.h
    # 2 = route (not including initial /)
    # 3 = #define name
    # 4 = mime type
    cat >> "$1" <<- EOF
    server->on("/$2", HTTP_GET, [](AsyncWebServerRequest *request) {
        serial_printf("/GET $2\n");
        request->send(200, "$4", $3);
    });
EOF
}


STATIC="${PROJECT}/static"
SPIFFS_DIR="$PROJECT/build/spiffs"
SPIFFS_BIN="$PROJECT/build/${PROJECT}.spiffs.bin"
if test -d "$STATIC"; then
    BROTLI=third_party/brotli/brotli
    ROUTES="$STATIC/routes.h"
    rm -rf "$SPIFFS_DIR"
    mkdir -p "$SPIFFS_DIR"

    echo "void register_routes(AsyncWebServer *server) {" > "$ROUTES"
    if test -f "$STATIC/index.html"; then
        add_route "$ROUTES" "" "INDEX_HTML" "text/html"
    fi
    cat > "$STATIC/inc_tmp.h" <<- EOF
// Autogenerated list of file static includes and their routes
extern void serial_printf(const char *fmt, ...);
EOF
    find scale/static/ -type f \( -name \*.js -o -name \*.html \) -print0 |
    while IFS= read -r -d '' path; do
        dir="${path%*/*}"
        file="${path##*/}"
        mime="`file --mime-type "$path" --brief`"
        def=`echo "${file^^}" | tr '. ' _`
        value="`cat $path`"
        route="`echo "$path" | sed "s|^${PROJECT}/static/||"`"
        spiffs_dir="$SPIFFS_DIR/`echo "${path%*/*}" | sed "s|^${PROJECT}/static||" | sed "s|^/||"`"

        $BROTLI --force --keep --best "$path"
        gzip --force --keep --best "$path"

        mkdir -p "$spiffs_dir"

        cp "$path.br" "$spiffs_dir"
        cp "$path.gz" "$spiffs_dir"

        add_route "$ROUTES" "$route" "$def" "$mime"

        echo "#include \"${route}.h\";" >> "$STATIC/inc_tmp.h"

        cat > "${dir}/${file}.h" <<- EOF
#ifndef __${def}__
#define __${def}__
const char* const $def = R"( $value )";
#endif
EOF
    done
    echo -e "}" >> "$ROUTES"

    cat "$ROUTES" >> "$STATIC/inc_tmp.h"
    rm -f "$ROUTES"
    mv "$STATIC/inc_tmp.h" "$ROUTES"
fi

echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Building \"${PROJECT}\"...\n$(tput sgr0)"
set +o errexit

$A_CLI $A_CFG compile \
    --fqbn "$FQBN" \
    --build-path $A_BUILD \
    --build-cache-path $A_BUILD/cache \
    "$PROJECT"

if [ "$?" == "0" ]; then
    echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Build succeeded \n$(tput sgr0)"
    if [ "$FLASH" == "true" ]; then
        echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Flashing \n$(tput sgr0)"
        PORT="${SERIAL_PORT:-}"
        if [ "$PORT" != "" ]; then
            PORT="--port $PORT"
        fi

        $A_CLI $A_CFG upload \
            $PORT \
            --fqbn "$FQBN" \
            --input-dir $A_BUILD \
            "$PROJECT"

        if [ "$?" == "0" ]; then
            echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Flashing succeeded \n$(tput sgr0)"
        else
            echo -e "$(tput setaf 0)$(tput setab 1)\n\n  Flashing failed \n$(tput sgr0)"
        fi
    fi

    if [ "$OTA_HOST" != "" ]; then
        echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Uploading OTA \n$(tput sgr0)"

        BIN_FILE="$A_BUILD/$PROJECT.ino.bin"
        MD5=`md5sum "$BIN_FILE" | cut -d' ' -f1`
        curl \
            --progress-bar \
            -o /dev/null \
            -F MD5=`md5sum "$BIN_FILE" | cut -d' ' -f1` \
            -F firmware=@"$BIN_FILE" \
            http://$OTA_HOST/update

        if [ "$?" == "0" ]; then
            echo -e "$(tput setaf 0)$(tput setab 2)\n\n  OTA succeeded \n$(tput sgr0)"
        else
            echo -e "$(tput setaf 0)$(tput setab 1)\n\n  OTA failed \n$(tput sgr0)"
        fi
    fi

    if [ "$SPIFFS" == "true" ]; then
        echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Packing SPIFFS\n$(tput sgr0)"

        SPIFFS_SIZE=`cat "${PROJECT}/build/partitions.csv" | grep spiffs | cut -d',' -f5`
        SPIFFS_OFFSET=`cat "${PROJECT}/build/partitions.csv" | grep spiffs | cut -d',' -f4`
        MKSPIFFS="`find .arduino15 -name mkspiffs -type f | head -n 1`"
        ESPTOOL="`find .arduino15 -name esptool.py -type f | head -n 1`"

        "$MKSPIFFS" -c "$SPIFFS_DIR" -b 4096 -p 256 -s $SPIFFS_SIZE "$SPIFFS_BIN"

        if [ "$FLASH" == "true" ]; then
            echo -e "$(tput setaf 0)$(tput setab 2)\n\n  Flashing SPIFFS\n$(tput sgr0)"
            "$ESPTOOL" \
                --chip esp32 \
                --port "$SERIAL_PORT" \
                --baud 921600 \
                write_flash \
                -z $SPIFFS_OFFSET \
                "$SPIFFS_BIN"

            if [ "$?" == "0" ]; then
                echo -e "$(tput setaf 0)$(tput setab 2)\n\n  SPIFFS succeeded \n$(tput sgr0)"
            else
                echo -e "$(tput setaf 0)$(tput setab 1)\n\n  SPIFFS failed \n$(tput sgr0)"
            fi
        fi

    fi
else
    echo -e "$(tput setaf 0)$(tput setab 1)\n\n  Build failed \n$(tput sgr0)"
fi
